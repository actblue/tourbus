#!/usr/bin/env ruby

require File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'common'))
require 'optimist'

# defaults
config = {
  :host => "http://localhost:3000",
  :concurrency => 1,
  :number => 1,
  :rand => nil,
  :verbose => false,
  :dumpfile => '/dev/null',
  :touristsdir => './tourists',
}

opts = Optimist.options do
  version "Isn't that adorable! You think this is mature enough to have a version?"
  opt :host, "Remote hostname to test", :default => config[:host]
  opt :concurrency, "Number of simultaneous tourists to run", :type => :integer, :default => config[:concurrency]
  opt :number, "Total number of tourists to run", :type => :integer, :default => config[:number]
  opt :list, "List tourists and, if verbose, tours available. (If tourist or tour filters are included, filters appropriately)", :type => :boolean, :default => nil
  opt :verbose, "Verbosity",  :default => config[:verbose]
  opt :rand, "Random seed", :type => :integer, :default => config[:rand]
  opt :tours, "Tour name(s) filter. The name of the tour to run (use --list --verbose to see the tour names). Use commas, no spaces, for mulitple names",  :type => :string, :default => nil
  opt :dumpfile, "File to dump run data to", :default => config[:dumpfile]
  opt :touristsdir, "Directory for tourist descriptions", :type => :string, :default => config[:touristsdir]
end

# config file wins
config_file = [opts[:touristsdir] + '/tourbus.yml', "./tourbus.yml", "./tourists/tourbus.yml", "./config/tourbus.yml", "~/tourbus.yml"].map {|p| File.expand_path(p)}.find {|p| File.exists? p}
file_config = config_file ? YAML::load_file(config_file).symbolize_keys : {}

config_map = { :host => :to_s, :concurrency => :to_i, :number => :to_i, :rand => :to_i, :tours => :to_s }
file_config.each do |key, value|
  opts[key] = if config_map.key? key
    value.send(config_map[key])
  else
    value
  end
end

srand opts[:rand] || Time.now.to_i

if opts[:dumpfile] == 'stdout'
  opts[:run_data] = STDOUT
else
  opts[:run_data] = File.open(opts[:dumpfile], "w")
end

require_all_files_in_folder opts[:touristsdir]

Tourist.configuration = opts

# at this point, ARGV should only contain the tourist_filter
opts[:tourist_filter] = ARGV

# Odd configuration layering
# For some reason Tourist knows to load a configuration file.
# don't feel like sorting it right now, revisit someday...
opts = opts.merge(Tourist.configuration)

tour_bus = TourBus.new(opts)

# Either display the list of tourists to run, or run them
if opts[:list]
  tour_bus.tourists.each do |tourist|
    puts "#{tourist} (weight: #{Tourist.get_weight(tourist)})"
    puts Tourist.tours(tourist).map {|tour| "  #{tour}"} if opts[:verbose]
  end
else
  tour_bus.run
end
